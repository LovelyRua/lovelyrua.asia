<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Minecraft on LovelyRua's Blog</title><link>https://www.lovelyrua.asia/tags/minecraft/</link><description>Recent content in Minecraft on LovelyRua's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Sep 2025 20:48:16 +0800</lastBuildDate><atom:link href="https://www.lovelyrua.asia/tags/minecraft/index.xml" rel="self" type="application/rss+xml"/><item><title>计网指北：使用 Nginx L4 反向代理 Minecraft 加速玩家访问</title><link>https://www.lovelyrua.asia/p/%E8%AE%A1%E7%BD%91%E6%8C%87%E5%8C%97%E4%BD%BF%E7%94%A8-nginx-l4-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-minecraft-%E5%8A%A0%E9%80%9F%E7%8E%A9%E5%AE%B6%E8%AE%BF%E9%97%AE/</link><pubDate>Mon, 01 Sep 2025 20:48:16 +0800</pubDate><guid>https://www.lovelyrua.asia/p/%E8%AE%A1%E7%BD%91%E6%8C%87%E5%8C%97%E4%BD%BF%E7%94%A8-nginx-l4-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-minecraft-%E5%8A%A0%E9%80%9F%E7%8E%A9%E5%AE%B6%E8%AE%BF%E9%97%AE/</guid><description>&lt;h3 id="前言"&gt;前言
&lt;/h3&gt;&lt;p&gt;本文主要受众为使用家庭宽带/机房托管等单线路网络的服主&lt;/p&gt;
&lt;p&gt;在为全国各省市使用不同运营商的玩家提供服务时&lt;/p&gt;
&lt;p&gt;遇到某些地区玩家反馈网络连接高延迟/丢包等问题的&lt;/p&gt;
&lt;p&gt;本文的内容简要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Stream 模块反向代理的核心配置方法&lt;/li&gt;
&lt;li&gt;一些补充玩法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文末我会推荐一种 相比传统 VPS/ECS 弹性极高 极大程度节约轻业务成本的解决方案&lt;/p&gt;
&lt;p&gt;✨&amp;gt;_0 准备工作&lt;/p&gt;
&lt;p&gt;在开始之前，请确保你已具备以下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一台正在运行的 Minecraft 服务器&lt;/strong&gt;: 并且你知道它的 &lt;strong&gt;IP 地址&lt;/strong&gt; 和 &lt;strong&gt;游戏端口&lt;/strong&gt;（默认为 25565）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一台拥有公网 IP 且线路优良的服务器 (VPS/ECS)&lt;/strong&gt;: 这台服务器将用来安装和运行 Nginx。&lt;/li&gt;
&lt;li&gt;(可选) &lt;strong&gt;一个你自己的域名&lt;/strong&gt;: 并已将其 DNS 解析管理权交由 Cloudflare 或其他 DNS 服务商。&lt;/li&gt;
&lt;li&gt;(可选) &lt;strong&gt;基础的 Linux 命令行操作能力&lt;/strong&gt;: 我们将通过 SSH 连接到服务器进行配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="安装-nginx"&gt;安装 Nginx
&lt;/h2&gt;&lt;p&gt;本步骤旨在确保你的服务器上安装了支持 TCP 代理的 Nginx。&lt;/p&gt;
&lt;p&gt;首先，通过 SSH 登录到你的 Nginx 服务器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 更新你的包管理器缓存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo apt update &lt;span class="c1"&gt;# 适用于 Debian/Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo yum update &lt;span class="c1"&gt;# 适用于 CentOS/RHEL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 安装 Nginx。大多数现代发行版的官方源都包含了 stream 模块。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo apt install nginx -y
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo yum install nginx -y
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 验证 Nginx 是否安装成功并查看版本信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ nginx -v
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 你应该会看到类似 `nginx version: nginx/1.18.0` 的输出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;！&lt;/strong&gt; Nginx 的 TCP/UDP 代理功能依赖于 &lt;strong&gt;&lt;code&gt;ngx_stream_module&lt;/code&gt;&lt;/strong&gt; 模块。幸运的是，几乎所有主流 Linux 发行版官方仓库中的 Nginx 包都&lt;strong&gt;默认编译&lt;/strong&gt;了这个模块。如果你的 Nginx 版本非常古老或来源特殊，你可能需要手动编译。可以通过 nginx -V (大写V) 命令查看编译参数，确认是否包含 &lt;code&gt;--with-stream&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="nginx-核心配置"&gt;Nginx 核心配置
&lt;/h2&gt;&lt;p&gt;与我们熟知的用于网站的 &lt;code&gt;http&lt;/code&gt; 块不同，代理OSI模型四层的 TCP/UDP 流量（比如 Minecraft 的游戏数据）需要使用 &lt;code&gt;stream&lt;/code&gt; 块。&lt;/p&gt;
&lt;p&gt;编辑 Nginx 的主配置文件 nginx.conf：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 使用你喜欢的文本编辑器打开主配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo nano /etc/nginx/nginx.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在文件的&lt;strong&gt;最外层&lt;/strong&gt;（与 &lt;code&gt;http&lt;/code&gt; 块平级，&lt;strong&gt;不要&lt;/strong&gt;放在 &lt;code&gt;http&lt;/code&gt; 块内部！）添加以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# ================= Stream (TCP/UDP Proxy) Settings =================
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 引用一个外部的配置文件目录，让配置更整洁
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="c1"&gt;# 这样我们就可以在 /etc/nginx/streams-available/ 目录中为每个服务创建独立的配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/streams-enabled/*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;！&lt;/strong&gt; 将 &lt;code&gt;stream&lt;/code&gt; 配置独立出来是一种非常好的工程实践。这让你的主配置文件 &lt;code&gt;nginx.conf&lt;/code&gt; 保持干净，并且便于管理多个不同的 TCP/UDP 代理服务。&lt;/p&gt;
&lt;p&gt;创建用于存放 stream 配置的目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 创建可用配置目录和启用配置目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo mkdir -p /etc/nginx/streams-available
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo mkdir -p /etc/nginx/streams-enabled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="为你的-minecraft-服务器创建反向代理配置"&gt;为你的 Minecraft 服务器创建反向代理配置
&lt;/h2&gt;&lt;p&gt;现在，我们将为你的 MC 服务器创建一个专属的配置文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 在 &amp;#39;streams-available&amp;#39; 目录下创建一个新的配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo nano /etc/nginx/streams-available/minecraft.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在打开的空文件中，粘贴以下内容，并&lt;strong&gt;根据注释修改为你自己的信息&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 定义一个上游服务器组，名字叫 &amp;#39;mc_backend&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;mc_backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 你的 Minecraft 服务器的真实内网地址和端口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="c1"&gt;# 如果是IP地址，可以直接填写。如果是域名，强烈建议参考下文“加速Hypixel”中的 resolver 配置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;your_minecraft_server_ip:25565&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 定义一个服务器监听块
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 让 Nginx 监听公网的 25565 端口，准备接收玩家的连接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;25565&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 将所有接收到的流量，原封不动地转发给我们刚刚定义的 &amp;#39;mc_backend&amp;#39; 上游服务器组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;mc_backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# (可选) 开启 proxy_protocol，用于向后端传递玩家的真实 IP 地址 ➊
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="c1"&gt;# proxy_protocol on;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;保存并退出文件 (Ctrl+X, Y, Enter)。&lt;/p&gt;
&lt;p&gt;现在，我们需要&lt;strong&gt;启用&lt;/strong&gt;这个配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 创建一个从 &amp;#39;available&amp;#39; 到 &amp;#39;enabled&amp;#39; 的软链接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 这就像在 Windows 桌面上创建一个快捷方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ sudo ln -s /etc/nginx/streams-available/minecraft.conf /etc/nginx/streams-enabled/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;➊ proxy_protocol 是什么？&lt;br&gt;
&lt;strong&gt;！&lt;/strong&gt; 当你使用反向代理时，你的 Minecraft 服务器看到的&lt;strong&gt;所有玩家的 IP 地址&lt;/strong&gt;都会变成 Nginx 服务器的地址（例如 127.0.0.1）。这会导致封禁 (ban) 和白名单 (whitelist) 功能失效。&lt;br&gt;
&lt;strong&gt;！&lt;/strong&gt; 开启 proxy_protocol 后，Nginx 会在转发数据时额外附加一个头部信息，包含了玩家的&lt;strong&gt;真实 IP&lt;/strong&gt;。你需要在你的 MC 服务器端（例如 Spigot/Paper 的配置文件 spigot.yml 中设置 bungeecord: true）也开启对这个协议的支持，才能正确获取玩家 IP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重载 Nginx 并测试&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 回到你的 Nginx 服务器终端。
- 首先，测试配置文件语法是否有误：
```bash
$ sudo nginx -t
# 如果一切正常，你会看到：
# nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
# nginx: configuration file /etc/nginx/nginx.conf test is successful
```
- 如果语法正确，平滑地重载 Nginx 使配置生效：
```bash
$ sudo systemctl reload nginx
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果连接失败，请优先检查&lt;strong&gt;服务器的防火墙（安全组）&lt;strong&gt;是否已经&lt;/strong&gt;放行了 TCP 25565 端口&lt;/strong&gt;的入站流量。这是最常见的错误原因。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="额外使用例"&gt;额外使用例
&lt;/h2&gt;&lt;h4 id="懒人方案"&gt;懒人方案
&lt;/h4&gt;&lt;p&gt;正文演示的方法是非常标准的 Nginx 配置最佳实践&lt;/p&gt;
&lt;p&gt;但如果你只需要反代一两个服务器 从效率的角度大可不必使用层级目录配置&lt;/p&gt;
&lt;p&gt;直接在主配置文件 &lt;code&gt;nginx.conf&lt;/code&gt; 里加入以下内容就可以了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kn"&gt;Port}&lt;/span&gt; &lt;span class="s"&gt;[udp]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kn"&gt;IP:Port}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="最简实现"&gt;最简实现
&lt;/h3&gt;&lt;p&gt;如果你甚至懒得装 Nginx 还可以用如下方法&lt;/p&gt;
&lt;h4 id="linux-iptables"&gt;Linux: iptables
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;这是什么&lt;/strong&gt;：Linux 内核自带的防火墙和网络地址转换 (NAT) 工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何实现&lt;/strong&gt;：通过设置 PREROUTING 和 POSTROUTING 链的 NAT 规则，可以实现端口转发，达到反向代理的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 假设后端 MC 服务器的 IP 是 1.1.1.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 1. 开启内核 IP 转发&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; $ sudo sysctl -w net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 2. 设置 DNAT 规则 (将所有访问本机 25565 端口的流量，目标地址改为 MC 服务器)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; $ sudo iptables -t nat -A PREROUTING -p tcp --dport &lt;span class="m"&gt;25565&lt;/span&gt; -j DNAT --to-destination 1.1.1.1:25565
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# 3. 设置 SNAT/MASQUERADE 规则 (将来自后端 MC 服务器的返回流量，源地址伪装成本机)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; $ sudo iptables -t nat -A POSTROUTING -p tcp -d 1.1.1.1 --dport &lt;span class="m"&gt;25565&lt;/span&gt; -j MASQUERADE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id="windows-netsh"&gt;Windows: netsh
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;**这是什么：Windows 系统内置的端口代理/转发命令行工具。&lt;/li&gt;
&lt;li&gt;**如何实现：在 Windows 服务器上，一行命令即可设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 以管理员身份运行 PowerShell 或 CMD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 将所有访问本机 IPv4 25565 端口的 TCP 流量，转发到目标服务器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;netsh&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;portproxy&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;v4tov4&lt;/span&gt; &lt;span class="n"&gt;listenport&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;25565&lt;/span&gt; &lt;span class="n"&gt;listenaddress&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="py"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="py"&gt;0&lt;/span&gt; &lt;span class="n"&gt;connectport&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;25565&lt;/span&gt; &lt;span class="n"&gt;connectaddress&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="py"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="py"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="加速-hypixel-动态域名解析示例"&gt;加速 Hypixel (动态域名解析示例)
&lt;/h3&gt;&lt;p&gt;是的，你还可以用一条&lt;strong&gt;直连线路更优的专线&lt;/strong&gt;来反向代理 &lt;strong&gt;Hypixel 等服务器&lt;/strong&gt;， 规避普通家庭宽带国际出口的拥堵，实现类似游戏加速器的效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;# 定义 Hypixel 的上游
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;upstream hypixel_backend {
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; # 当后端是域名时，必须使用 resolver 指令！
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; # Nginx 默认只在启动时解析一次域名，如果域名 IP 变了，Nginx 不会知道。
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; # resolver 指令告诉 Nginx 使用指定的 DNS 服务器，并周期性地重新解析域名。
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; # 这里的 8.8.8.8 是 Google DNS，valid=300s 表示每 300 秒（5分钟）刷新一次。
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; resolver 8.8.8.8 valid=300s;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; server mc.hypixel.net:25565;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;server {
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; # 监听你的 VPS 的 25565 端口
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; listen 25565;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; proxy_pass hypixel_backend;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;！&lt;/strong&gt; &lt;strong&gt;注意&lt;/strong&gt;：这种方法&lt;strong&gt;仅供个人或小范围朋友使用&lt;/strong&gt;。公开提供此类服务可能违反 Hypixel 的用户协议，这只是一个利用技术提升个人游戏体验的有趣实践。&lt;/p&gt;
&lt;h3 id="推荐雨云云应用"&gt;推荐：雨云云应用
&lt;/h3&gt;&lt;p&gt;对于这种需求 使用一台完整的VPS/ECS主机实际产生了不小的资源及成本浪费&lt;/p&gt;
&lt;p&gt;在此强烈推荐使用的方案：&lt;strong&gt;雨云云应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一种以单个容器为最小单位的弹性极高的云服务&lt;/p&gt;
&lt;p&gt;使用云应用 我们可以节省相比ECS十倍甚至九倍的成本&lt;/p&gt;
&lt;p&gt;雨云提供的社区应用商店功能还很大程度上简化了传统安装部署的人力和时间消费&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/5335f4ce-f8f5-4e25-a4cb-6f654999e91d/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926143228.png]"
&gt;&lt;/p&gt;
&lt;p&gt;接下来我会逐步演示如何通过雨云云应用部署 L4 反向代理服务&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/a15d515d-bee3-4658-9b4e-62159d9fda35/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926143439.png]"
&gt;&lt;/p&gt;
&lt;p&gt;首先在应用商店界面找到需要安装的应用 这里可以使用 Nginx Proxy Manager&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/04868b2c-052c-4abe-9398-7b5d93adfdce/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926143559.png]"
&gt;
&lt;img src="https://pic.lovelyrua.asia:81/api/assets/03a4eb2f-5983-4ef7-aa0e-35df67d6b770/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926143614.png]"
&gt;&lt;/p&gt;
&lt;p&gt;这里的端口填写不用担心 稍后都可以进行修改&lt;/p&gt;
&lt;p&gt;点击安装应用之后就可以看到 Nginx Proxy Manager 已经出现在应用管理界面里&lt;/p&gt;
&lt;p&gt;几秒内应用就会自动完成部署并启动&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/b2bdbc52-002c-4662-930a-bb64898247ed/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926143643.png]"
&gt;&lt;/p&gt;
&lt;p&gt;安装完成后 我们需要调整容器应用对外暴露的端口&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;我的项目 - 应用管理 - 应用 - 服务&lt;/code&gt; 页面可以对应用进行端口的配置&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/bf6d5996-c707-4f50-a65a-35f68b2385db/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926143807.png]"
&gt;&lt;/p&gt;
&lt;p&gt;Nginx Proxy Manager 默认会暴露 WebUI 控制台的端口和 HTTP &amp;amp; HTTPS 的端口&lt;/p&gt;
&lt;p&gt;由于这里我们是进行 MC 服务器的反代 可以直接将用不到的 80 和 443 端口 修改成自己需要的端口（这一步骤可按照个人喜好自行配置）&lt;/p&gt;
&lt;p&gt;端口映射输入框中前一个框代表容器本身监听的内部端口 后一个框表示实际暴露到外部访问 IP 的端口&lt;/p&gt;
&lt;p&gt;如这里设置 25565:8500 就意味着稍后我们需要将反向代理监听在 :25565 并使用端口8500 访问雨云提供的 IP 就可以连接到我们的服务器&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/d340be74-0862-49fb-acd5-d8b94500ba17/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926143933.png]"
&gt;&lt;/p&gt;
&lt;p&gt;(容器内部我们让 Nginx 监听 25565 端口，然后雨云平台将这个内部端口映射到公网 IP 的 8500 端口上)&lt;/p&gt;
&lt;p&gt;接下来访问 Nginx Proxy Manager 的 WebUI 控制台来进行反向代理的实际配置&lt;/p&gt;
&lt;p&gt;默认的公网地址是从集群共享 IP 中随机分配的&lt;/p&gt;
&lt;p&gt;如有独立公网 IP 的需求 可以在&lt;code&gt;我的项目 - 设置 - IP 地址管理&lt;/code&gt;添加独立 IP 地址(会产生相应费用)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/49d4b406-dc22-4b43-afaf-0c4d107bd059/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926150719.png]"
&gt;&lt;/p&gt;
&lt;p&gt;后台的地址是在服务界面看到的公网 IP 地址加控制台服务的外部端口&lt;/p&gt;
&lt;p&gt;比如在这里就是 &lt;code&gt;http://110.42.111.57:41998&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/343aee91-ea9d-472b-ba47-012c4e518b77/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926151255.png]"
&gt;&lt;/p&gt;
&lt;p&gt;默认账户密码是&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="mailto:admin@example.com" &gt;admin@example.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;changeme&lt;/p&gt;
&lt;p&gt;第一次登录之后先跟随指引修改管理员账户密码&lt;/p&gt;
&lt;p&gt;要创建四层代理 我们需要到 Streams 配置页面 点击右上角的 Add Stream&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/eb01e70a-c339-4c76-ac6b-319212920bba/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926151740.png]"
&gt;
&lt;img src="https://pic.lovelyrua.asia:81/api/assets/89105190-758c-4c65-9e41-c386fdf77fb3/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926151810.png]"
&gt;
&lt;img src="https://pic.lovelyrua.asia:81/api/assets/4e617f1b-199f-4207-926c-f37184f2a467/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926151846.png]"
&gt;&lt;/p&gt;
&lt;p&gt;这里的 Incoming Port 需要填写对应我们刚刚在雨云防火墙设置的 &lt;strong&gt;内部端口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚才的演示中我们填写了 25565 故此处需要填 25565&lt;/p&gt;
&lt;p&gt;Forward Host&amp;amp;Port 填写的是被代理的服务的主机名或 IP 地址&lt;/p&gt;
&lt;p&gt;比如被代理的是 &lt;code&gt;mc.lovelyrua.asia:25566&lt;/code&gt; 这里就填写 &lt;code&gt;mc.lovelyrua.asia&lt;/code&gt; 和 &lt;code&gt;25566&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果如上步骤无误 保存之后访问&lt;code&gt;110.42.111.57:8500&lt;/code&gt;就可以访问到经过代理后的服务了&lt;/p&gt;
&lt;p&gt;如果要代理多个服务器 通过一样的步骤开放端口并添加代理配置即可&lt;/p&gt;
&lt;p&gt;看完本文内容应该也已经对雨云云应用的使用有了一定了解&lt;/p&gt;
&lt;p&gt;最后分享一下自己使用一段时间的费用&lt;/p&gt;
&lt;p&gt;我个人轻度使用下来 每星期成本仅五元 且共享网络的弹性带宽空间上限也更大&lt;/p&gt;
&lt;p&gt;按量计费的流量每百GB也只要5元左右&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/4d51d745-86b8-4c35-9861-167cfffaddd8/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926155848.png]"
&gt;
&lt;img src="https://pic.lovelyrua.asia:81/api/assets/0aa28780-1c57-4ba3-ae65-737e0904cc85/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[Pasted image 20250926160825.png]"
&gt;&lt;/p&gt;
&lt;h5 id="补充雨云机房反代前后延迟"&gt;补充：雨云机房反代前后延迟
&lt;/h5&gt;&lt;p&gt;&lt;img src="https://pic.lovelyrua.asia:81/api/assets/7d78ac9c-556f-48f6-982b-44e0822239d4/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[a1d52736-c142-40bd-8053-5176d526dce3.png]"
&gt;
&lt;img src="https://pic.lovelyrua.asia:81/api/assets/418f26e7-fb4d-4519-b0d0-a6e1b5dde3fc/original?key=IYz7LMuntz9bMrdmgVMKTyHJMWIK4DUzkkOSjAErkiA3UL_hxjcg2zhSCabSWWEuF1Y"
loading="lazy"
alt="[2aeca52f-24ae-4283-9d56-5dc2818a3d89.png]"
&gt;&lt;/p&gt;
&lt;p&gt;虽然直观数据差别不大 但是对于本身网络环境不佳的用户来说三线优化线路会带来质的飞跃&lt;/p&gt;</description></item></channel></rss>