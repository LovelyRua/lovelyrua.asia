[{"content":"前言 本文主要受众为使用家庭宽带/机房托管等单线路网络的服主\n在为全国各省市使用不同运营商的玩家提供服务时\n遇到某些地区玩家反馈网络连接高延迟/丢包等问题的\n本文的内容简要：\nNginx Stream 模块反向代理的核心配置方法 一些补充玩法 文末我会推荐一种 相比传统 VPS/ECS 弹性极高 极大程度节约轻业务成本的解决方案\n✨\u0026gt;_0 准备工作\n在开始之前，请确保你已具备以下条件：\n一台正在运行的 Minecraft 服务器: 并且你知道它的 IP 地址 和 游戏端口（默认为 25565）。 一台拥有公网 IP 且线路优良的服务器 (VPS/ECS): 这台服务器将用来安装和运行 Nginx。 (可选) 一个你自己的域名: 并已将其 DNS 解析管理权交由 Cloudflare 或其他 DNS 服务商。 (可选) 基础的 Linux 命令行操作能力: 我们将通过 SSH 连接到服务器进行配置。 安装 Nginx 本步骤旨在确保你的服务器上安装了支持 TCP 代理的 Nginx。\n首先，通过 SSH 登录到你的 Nginx 服务器。\n1 2 3 4 5 6 7 8 9 10 11 # 更新你的包管理器缓存 $ sudo apt update # 适用于 Debian/Ubuntu $ sudo yum update # 适用于 CentOS/RHEL # 安装 Nginx。大多数现代发行版的官方源都包含了 stream 模块。 $ sudo apt install nginx -y $ sudo yum install nginx -y # 验证 Nginx 是否安装成功并查看版本信息 $ nginx -v # 你应该会看到类似 `nginx version: nginx/1.18.0` 的输出 ！ Nginx 的 TCP/UDP 代理功能依赖于 ngx_stream_module 模块。幸运的是，几乎所有主流 Linux 发行版官方仓库中的 Nginx 包都默认编译了这个模块。如果你的 Nginx 版本非常古老或来源特殊，你可能需要手动编译。可以通过 nginx -V (大写V) 命令查看编译参数，确认是否包含 --with-stream。\nNginx 核心配置 与我们熟知的用于网站的 http 块不同，代理OSI模型四层的 TCP/UDP 流量（比如 Minecraft 的游戏数据）需要使用 stream 块。\n编辑 Nginx 的主配置文件 nginx.conf：\n1 2 # 使用你喜欢的文本编辑器打开主配置文件 $ sudo nano /etc/nginx/nginx.conf 在文件的最外层（与 http 块平级，不要放在 http 块内部！）添加以下内容：\n1 2 3 4 5 6 7 # ================= Stream (TCP/UDP Proxy) Settings ================= stream { # 引用一个外部的配置文件目录，让配置更整洁 # 这样我们就可以在 /etc/nginx/streams-available/ 目录中为每个服务创建独立的配置文件 include /etc/nginx/streams-enabled/*; } ！ 将 stream 配置独立出来是一种非常好的工程实践。这让你的主配置文件 nginx.conf 保持干净，并且便于管理多个不同的 TCP/UDP 代理服务。\n创建用于存放 stream 配置的目录：\n1 2 3 # 创建可用配置目录和启用配置目录 $ sudo mkdir -p /etc/nginx/streams-available $ sudo mkdir -p /etc/nginx/streams-enabled 为你的 Minecraft 服务器创建反向代理配置 现在，我们将为你的 MC 服务器创建一个专属的配置文件。\n1 2 # 在 \u0026#39;streams-available\u0026#39; 目录下创建一个新的配置文件 $ sudo nano /etc/nginx/streams-available/minecraft.conf 在打开的空文件中，粘贴以下内容，并根据注释修改为你自己的信息：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 定义一个上游服务器组，名字叫 \u0026#39;mc_backend\u0026#39; upstream mc_backend { # 你的 Minecraft 服务器的真实内网地址和端口 # 如果是IP地址，可以直接填写。如果是域名，强烈建议参考下文“加速Hypixel”中的 resolver 配置 server your_minecraft_server_ip:25565; } # 定义一个服务器监听块 server { # 让 Nginx 监听公网的 25565 端口，准备接收玩家的连接 listen 25565; # 将所有接收到的流量，原封不动地转发给我们刚刚定义的 \u0026#39;mc_backend\u0026#39; 上游服务器组 proxy_pass mc_backend; # (可选) 开启 proxy_protocol，用于向后端传递玩家的真实 IP 地址 ➊ # proxy_protocol on; } 保存并退出文件 (Ctrl+X, Y, Enter)。\n现在，我们需要启用这个配置：\n1 2 3 # 创建一个从 \u0026#39;available\u0026#39; 到 \u0026#39;enabled\u0026#39; 的软链接 # 这就像在 Windows 桌面上创建一个快捷方式 $ sudo ln -s /etc/nginx/streams-available/minecraft.conf /etc/nginx/streams-enabled/ ➊ proxy_protocol 是什么？\n！ 当你使用反向代理时，你的 Minecraft 服务器看到的所有玩家的 IP 地址都会变成 Nginx 服务器的地址（例如 127.0.0.1）。这会导致封禁 (ban) 和白名单 (whitelist) 功能失效。\n！ 开启 proxy_protocol 后，Nginx 会在转发数据时额外附加一个头部信息，包含了玩家的真实 IP。你需要在你的 MC 服务器端（例如 Spigot/Paper 的配置文件 spigot.yml 中设置 bungeecord: true）也开启对这个协议的支持，才能正确获取玩家 IP。\n重载 Nginx 并测试\n- 回到你的 Nginx 服务器终端。 - 首先，测试配置文件语法是否有误： ```bash $ sudo nginx -t # 如果一切正常，你会看到： # nginx: the configuration file /etc/nginx/nginx.conf syntax is ok # nginx: configuration file /etc/nginx/nginx.conf test is successful ``` - 如果语法正确，平滑地重载 Nginx 使配置生效： ```bash $ sudo systemctl reload nginx ``` 如果连接失败，请优先检查服务器的防火墙（安全组）是否已经放行了 TCP 25565 端口的入站流量。这是最常见的错误原因。\n额外使用例 懒人方案 正文演示的方法是非常标准的 Nginx 配置最佳实践\n但如果你只需要反代一两个服务器 从效率的角度大可不必使用层级目录配置\n直接在主配置文件 nginx.conf 里加入以下内容就可以了\n1 2 3 4 5 6 7 8 stream { server { listen {Port} [udp]; proxy_pass {IP:Port}; } } 最简实现 如果你甚至懒得装 Nginx 还可以用如下方法\nLinux: iptables 这是什么：Linux 内核自带的防火墙和网络地址转换 (NAT) 工具。 如何实现：通过设置 PREROUTING 和 POSTROUTING 链的 NAT 规则，可以实现端口转发，达到反向代理的效果。 1 2 3 4 5 6 7 8 9 10 # 假设后端 MC 服务器的 IP 是 1.1.1.1 # 1. 开启内核 IP 转发 $ sudo sysctl -w net.ipv4.ip_forward=1 # 2. 设置 DNAT 规则 (将所有访问本机 25565 端口的流量，目标地址改为 MC 服务器) $ sudo iptables -t nat -A PREROUTING -p tcp --dport 25565 -j DNAT --to-destination 1.1.1.1:25565 # 3. 设置 SNAT/MASQUERADE 规则 (将来自后端 MC 服务器的返回流量，源地址伪装成本机) $ sudo iptables -t nat -A POSTROUTING -p tcp -d 1.1.1.1 --dport 25565 -j MASQUERADE Windows: netsh **这是什么：Windows 系统内置的端口代理/转发命令行工具。 **如何实现：在 Windows 服务器上，一行命令即可设置。 1 2 3 4 # 以管理员身份运行 PowerShell 或 CMD # 将所有访问本机 IPv4 25565 端口的 TCP 流量，转发到目标服务器 netsh interface portproxy add v4tov4 listenport=25565 listenaddress=0.0.0.0 connectport=25565 connectaddress=1.1.1.1 加速 Hypixel (动态域名解析示例) 是的，你还可以用一条直连线路更优的专线来反向代理 Hypixel 等服务器， 规避普通家庭宽带国际出口的拥堵，实现类似游戏加速器的效果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 定义 Hypixel 的上游 upstream hypixel_backend { # 当后端是域名时，必须使用 resolver 指令！ # Nginx 默认只在启动时解析一次域名，如果域名 IP 变了，Nginx 不会知道。 # resolver 指令告诉 Nginx 使用指定的 DNS 服务器，并周期性地重新解析域名。 # 这里的 8.8.8.8 是 Google DNS，valid=300s 表示每 300 秒（5分钟）刷新一次。 resolver 8.8.8.8 valid=300s; server mc.hypixel.net:25565; } server { # 监听你的 VPS 的 25565 端口 listen 25565; proxy_pass hypixel_backend; } ！ 注意：这种方法仅供个人或小范围朋友使用。公开提供此类服务可能违反 Hypixel 的用户协议，这只是一个利用技术提升个人游戏体验的有趣实践。\n推荐：雨云云应用 对于这种需求 使用一台完整的VPS/ECS主机实际产生了不小的资源及成本浪费\n在此强烈推荐使用的方案：雨云云应用\n这是一种以单个容器为最小单位的弹性极高的云服务\n使用云应用 我们可以节省相比ECS十倍甚至九倍的成本\n雨云提供的社区应用商店功能还很大程度上简化了传统安装部署的人力和时间消费\n接下来我会逐步演示如何通过雨云云应用部署 L4 反向代理服务\n首先在应用商店界面找到需要安装的应用 这里可以使用 Nginx Proxy Manager\n这里的端口填写不用担心 稍后都可以进行修改\n点击安装应用之后就可以看到 Nginx Proxy Manager 已经出现在应用管理界面里\n几秒内应用就会自动完成部署并启动\n安装完成后 我们需要调整容器应用对外暴露的端口\n在 我的项目 - 应用管理 - 应用 - 服务 页面可以对应用进行端口的配置\nNginx Proxy Manager 默认会暴露 WebUI 控制台的端口和 HTTP \u0026amp; HTTPS 的端口\n由于这里我们是进行 MC 服务器的反代 可以直接将用不到的 80 和 443 端口 修改成自己需要的端口（这一步骤可按照个人喜好自行配置）\n端口映射输入框中前一个框代表容器本身监听的内部端口 后一个框表示实际暴露到外部访问 IP 的端口\n如这里设置 25565:8500 就意味着稍后我们需要将反向代理监听在 :25565 并使用端口8500 访问雨云提供的 IP 就可以连接到我们的服务器\n(容器内部我们让 Nginx 监听 25565 端口，然后雨云平台将这个内部端口映射到公网 IP 的 8500 端口上)\n接下来访问 Nginx Proxy Manager 的 WebUI 控制台来进行反向代理的实际配置\n默认的公网地址是从集群共享 IP 中随机分配的\n如有独立公网 IP 的需求 可以在我的项目 - 设置 - IP 地址管理添加独立 IP 地址(会产生相应费用)\n后台的地址是在服务界面看到的公网 IP 地址加控制台服务的外部端口\n比如在这里就是 http://110.42.111.57:41998\n默认账户密码是\nadmin@example.com\nchangeme\n第一次登录之后先跟随指引修改管理员账户密码\n要创建四层代理 我们需要到 Streams 配置页面 点击右上角的 Add Stream\n这里的 Incoming Port 需要填写对应我们刚刚在雨云防火墙设置的 内部端口\n刚才的演示中我们填写了 25565 故此处需要填 25565\nForward Host\u0026amp;Port 填写的是被代理的服务的主机名或 IP 地址\n比如被代理的是 mc.lovelyrua.asia:25566 这里就填写 mc.lovelyrua.asia 和 25566\n如果如上步骤无误 保存之后访问110.42.111.57:8500就可以访问到经过代理后的服务了\n如果要代理多个服务器 通过一样的步骤开放端口并添加代理配置即可\n看完本文内容应该也已经对雨云云应用的使用有了一定了解\n最后分享一下自己使用一段时间的费用\n我个人轻度使用下来 每星期成本仅五元 且共享网络的弹性带宽空间上限也更大\n按量计费的流量每百GB也只要5元左右\n补充：雨云机房反代前后延迟 虽然直观数据差别不大 但是对于本身网络环境不佳的用户来说三线优化线路会带来质的飞跃\n","date":"2025-09-01T20:48:16+08:00","permalink":"https://www.lovelyrua.asia/p/%E8%AE%A1%E7%BD%91%E6%8C%87%E5%8C%97%E4%BD%BF%E7%94%A8-nginx-l4-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-minecraft-%E5%8A%A0%E9%80%9F%E7%8E%A9%E5%AE%B6%E8%AE%BF%E9%97%AE/","title":"计网指北：使用 Nginx L4 反向代理 Minecraft 加速玩家访问"},{"content":"状态与撤销 git status // 让我看看怎么个事\ngit restore \u0026lt;file\u0026gt; // 按下回车就和你的文件撒哟娜拉了\n*git checkout -- \u0026lt;file\u0026gt; // 撒哟娜拉 in 2000s\n暂存区操作 git add \u0026lt;file\u0026gt; // 温柔的把写完的胡话扔到篮子里\ngit restore --staged \u0026lt;file\u0026gt; // 撤销暂存区修改 add→不add\n*git reset HEAD \u0026lt;file\u0026gt; // 旧撤销暂存区修改 不 restore\ngit rm --cached \u0026lt;file\u0026gt; // 暂存区丢弃 保留工作区文件 add 了忘加 .gitignore 的文件用\n提交与历史 git commit -m \u0026lt;info\u0026gt; // 把胡话 push 就没脸见同事了\ngit log // 查有没有提交胡话\ngit reset --soft HEAD^ // 还好没 push 消灭证据把胡话改了\ngit reset --hard HEAD~1 // 时光机\ngit reflog // 哎我操胡话和代码全滚了\n分支与合并 git switch \u0026lt;branch\u0026gt; // Nintendo\n*git checkout \u0026lt;branch\u0026gt; // HELLO WORLD\ngit branch -m \u0026lt;old\u0026gt; \u0026lt;new\u0026gt; // 农奴翻身做主人\ngit merge --no-ff -m \u0026lt;commit\u0026gt; \u0026lt;branch\u0026gt; // 合并胡话到当前分支\ngit merge --squash \u0026lt;branch\u0026gt; // 打包合并\ngit cherry-pick \u0026lt;commit\u0026gt; // 重放提交到当前分支\ngit rebase \u0026lt;branch\u0026gt; // 将当前分支的起点移到分支的最新处\n清理 git clean -fd // node_modules backhole.gif\n重磅消息：为了解决和文件撒哟娜拉的困扰 我们引入了胡话烘干桶！ git stash // 写一半胡话去玩任天堂\ngit stash list // 列出烘干胡话\ngit stash apply stash@{0} // 把胡话干夹在胡话里\ngit stash pop stash@{0} // 吃掉胡话干\ngit stash drop stash@{0} // 扔掉过期胡话干\ngit restore --source=stash@{0} -- \u0026lt;file\u0026gt; // 胡话干占领地球\n*git checkout stash@{0} -- \u0026lt;file\u0026gt; // 旧胡话干占领地球\n* tagged is gitting old\n","date":"2025-05-06T09:32:23+08:00","permalink":"https://www.lovelyrua.asia/p/git-%E5%B0%8F%E7%AF%86%E4%B9%8B-%E5%AD%98%E6%9F%A5%E5%A4%87-control-changes-better/","title":"Git 小篆之 存查备 - Control Changes Better"},{"content":" 》》 将心比心，换位思考；务实求索，无限进步 《《\n##前言## 本文将基于实操使用 Hexo 静态博客框架, 并借助 GitHub Pages 和 Cloudflare CDN 服务, 搭建一个无需租用服务器, 无需支付任何费用即可访问的高性能个人博客站点. 本文旨在帮助读者了解以下内容:\n静态网站的基本原理 GitHub Pages 的使用 CDN 加速的优势 Node.js 基础操作 ✨\u0026gt;_0 准备工作 在开始之前, 请确保您的计算机已安装以下环境：\nNode.js 环境 (官方下载地址) : Hexo 基于 Node.js 运行, 您需要安装 Node.js. Git (官方下载地址) : 用于将博客部署到 GitHub. GitHub 账号 (注册地址) : 用于存储博客部署后的静态文件. 可选 :\n自己的 域名 和 Cloudflare 账号, 用于后续配置 Cloudflare CDN 及个性化域名. 创建 Github Pages 仓库 登录你的 Github 账号并访问: https://github.com/new\n在 Repository name 一框填入: {你的用户名}.github.io . 如 lovelyrua.github.io 点击 右下角绿色按钮 Create Repository\n接下来便可跟随本文步骤指引搭建你的博客\n安装 Hexo 本步骤参考 (Hexo官方文档 - 建站)\n选择一个合适目录储存项目, 这里创建一个 hexo-blog 文件夹为例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # 创建并进入项目目录; `\u0026amp;\u0026amp;` 表示前一个命令成功执行后执行后一个命令 $ mkdir hexo-blog \u0026amp;\u0026amp; cd hexo-blog # 在当前目录下使用 nodejs 提供的包管理工具 `npm` 来安装 hexo 命令行工具 (hexo-cli). # 如果想要在任何目录下都能直接使用 `hexo` 命令, 可以使用 `npm install hexo-cli -g` 进行全局安装 ➊ $ npm install hexo-cli # 初始化 hexo 项目 \u0026#39;blog\u0026#39;, hexo 会在当前目录下创建文件夹并从 github 拉取模板. # `npx` 是 npm 自带的包执行工具, 它会查找本地 \u0026#39;node_modules/.bin\u0026#39; 中的命令 # 如果上一步骤进行了全局安装, 这里就可以直接执行 `hexo init blog` $ npx hexo init blog \u0026amp;\u0026amp; cd blog # 安装项目依赖. 此命令会根据目录下的 \u0026#39;package.json\u0026#39; 文件中 \u0026#34;dependencies\u0026#34; 字块安装所需依赖 $ npm install # 启动 hexo 测试服务端 $ npx hexo server # `server` 也可直接缩写成 `s` # 以上操作若过程无误 控制台会输出: # `INFO Hexo is running at http://localhost:4000/ .` 此时在浏览器访问 http://localhost:4000/ 即可看到 hexo 的初始主题页面.\n如果启动或后续步骤出现类似 Error: Cannot find module 'xxx' 的报错, 说明依赖安装不完整 用 npm install {报错提示缺少的依赖} 命令补充安装依赖即可; 若还是无法解决 可以尝试删除 node_modules 文件夹和 package-lock.json 文件后重新运行 npm install\n➊ 全局安装:\n! 当使用 -g 参数全局安装一个包时, npm 会将可执行文件链接到系统的 PATH 环境变量所包含的目录中 (如 Node.js 安装目录), 这样系统就能在任何位置识别 hexo 命令. ! 如果全局安装后命令仍不可用, 可能需要重启终端或检查系统 PATH 环境变量配置.\n创建第一篇文章 作为一个静态博客框架, Hexo 不像 WordPress, QQ空间 或 新浪微博 那样提供在线编辑器让你随时随地编辑发布 它的工作流程更接近于开发者编写代码: 在本地创建文件 - 编辑内容 - 然后通过命令生成最终的网页文件并部署\n本步骤参考 (Hexo官方文档 - 写作)\n使用命令创建新文章: 确保终端位于 Hexo 项目的根目录 (即 blog 文件夹内). 然后执行以下命令:\n1 2 3 4 5 6 $ npx hexo new post \u0026#34;我的第一篇文章\u0026#34; # `new` 是创建命令, \u0026#39;post\u0026#39; 是文章的布局 (layout), \u0026#34;我的第一篇文章\u0026#34; 是文章标题 # 如果标题包含空格, 最好用引号括起来 # 控制台会输出类似信息: # INFO Created: ~/your/path/to/hexo-blog/blog/source/_posts/我的第一篇文章.md ! 这个命令会在 source/_posts/ 目录下创建一个名为 \u0026ldquo;我的第一篇文章.md\u0026rdquo; 的 Markdown 文件. ! post 是 Hexo 默认的文章布局, 你也可以创建其他布局 (如 draft 草稿, page 独立页面等).\n编辑文章内容: 使用你喜欢的文本编辑器 (如 VS Code, Sublime Text, Obsidian 等) 打开刚刚创建的 .md 文件 你会看到文件顶部有一段由 --- 包裹的内容, 这叫做 Front-matter, 用于定义这篇文章的元数据:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- layout: post # 文章布局, 自动根据命令生成 title: 我的第一篇文章 # 文章标题, 自动根据命令生成 date: 2025-04-09 20:15:00 # 文章创建时间, 自动生成 tags: [hello, markdown] # 文章标签, 可以自行添加 --- # 这里是正文的开始 欢迎来到我的新博客! 这是我的第一篇文章，使用 **Markdown** 语法编写。 * 列表项1 * 列表项2 你可以在 \u0026mdash; 下方开始使用 Markdown 语法编写你的文章正文 可以修改 title, 添加 tags (多个标签用逗号分隔或使用 YAML 列表格式). date 通常保持自动生成的时间即可.\n本地预览: 编辑并保存好文章后回到终端 如果之前的 hexo server 还在运行, 可以先按 Ctrl+C 停止. 然后重新启动服务器进行预览：\n1 2 3 4 5 6 7 8 # 清理之前构建的文件 (可选, 但修改配置或主题后需要执行) npx hexo clean # 生成静态文件 (可选, server 命令通常会自动处理) npx hexo generate # 启动本地服务器 npx hexo server 刷新浏览器中的 http://localhost:4000/, 你应该能在首页看到你新创建的文章 \u0026ldquo;我的第一篇文章\u0026rdquo; 的摘要或标题, 点击即可进入阅读.\n本节涉及的命令及其缩写:\n! npm i == npm install ! hexo n == hexo new ! hexo g == hexo generate ! hexo s == hexo server ! hexo d == hexo deploy ! hexo clean (无缩写)\n将 Hexo 部署到 GitHub 现在你已经在本地创建并预览了你的第一篇文章. 下一步就是将博客发布到互联网上, 让其他人也能访问.\n静态博客的优势在于, 生成的网站文件无需复杂的服务器端处理; 只要将这些文件托管在任何可公开访问的 Web 服务器上, 站点就能运行.\nGitHub Pages 提供了一个免费的静态网站托管服务, 非常适合部署 Hexo 生成的静态博客. Hexo 提供了一键部署功能, 可以方便地将生成的静态文件推送到指定的 Git 仓库. 在此将演示 Hexo 提供的一键部署功能\n本步骤参考 (Hexo官方文档 - 一键部署)\n安装 Git 部署插件: 要使用一键部署, 首先需要根据自己要部署到的平台安装对应的 deployer 插件 安装针对 GitHub (或其他 Git 仓库) 的部署插件 hexo-deployer-git:\n1 $ npm install hexo-deployer-git 配置 _config.yml: 在部署前需要编辑 Hexo 项目的设置 在 _config.yml内填入必要的信息:\n1 2 3 4 5 6 7 8 # 找到文件末尾的 `deploy` 配置项 deploy: type: git repo: https://github.com/用户名/用户名.github.io.git # 修改仓库地址 # ！！极其重要：替换成你自己的仓库地址！！ # 例如: https://github.com/LovelyRua/lovelyrua.github.io.git branch: main # GitHub Pages 仓库默认分支名 # message: \u0026#34;Site updated: {{ now(\u0026#39;YYYY-MM-DD HH:mm:ss\u0026#39;) }}\u0026#34; # 可选, 自定义 commit 信息 ! type: 一键部署方式的类型, 这里必须是 git ! ! repo: 务必替换成你自己的 GitHub Pages 仓库地址. 这个仓库通常命名为 {你的GitHub用户名}.github.io. 可以使用 HTTPS 或 SSH 格式的地址. ! ! branch: 指定要将静态文件推送到哪个分支. 对于 用户名.github.io 这种仓库, 通常是 main 或 master 分支作为 GitHub Pages 的源. 具体依赖于你的仓库设置.\n保存文件后 执行部署命令\n1 2 3 $ npx hexo deploy # 这个命令会先执行 `hexo generate` (生成静态文件到 public 目录) # 然后将 public 目录的内容推送到你配置的 repo 和 branch。 首次部署可能遇到的情况:\nGit 身份未配置: 如果你之前没有在本机配置过 Git 的用户名和邮箱, 可能会看到类似以下的提示:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 PS X:\\your\\path\\hexo-blog\\blog\u0026gt; npx hexo deploy INFO Validating config INFO Deploying: git INFO Setting up Git deployment... Initialized empty Git repository in X:/your/path/hexo-blog/blog/.deploy_git/.git/ Author identity unknown *** Please tell me who you are. Run git config --global user.email \u0026#34;you@example.com\u0026#34; git config --global user.name \u0026#34;Your Name\u0026#34; to set your account\u0026#39;s default identity. Omit --global to set the identity only in this repository. ... 这是因为 Git 必须提供提交时必要的身份信息 如上情况只需按照提示 通过这两条命令设置 Git 的默认身份信息:\n1 2 $ git config --global user.email \u0026#34;{你的邮箱}\u0026#34; $ git config --global user.name \u0026#34;{你的名字}\u0026#34; 设置完成后再重新执行 npx hexo deploy 验证部署结果:\n1 INFO Deploy done: git 当终端输出如上日志即说明部署成功了 访问你的 Github Pages 仓库, 即可看到编译出的网页静态文件. 稍等片刻 GitHub Pages 需要一点时间来更新\n🎉 恭喜你! 至此步骤在浏览器打开 https://你的用户名.github.io/ 就可以访问你刚刚部署到 Github Pages 的博客了\n如需编写新文章 只需重复从 步骤1.2 开始的操作\n通过 Cloudflare CDN 加速国内访问 TODO\u0026hellip;\n","date":"2025-04-09T22:22:22+08:00","permalink":"https://www.lovelyrua.asia/p/%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%8C%87%E5%8D%97-hexo--github-pages-%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/","title":"保姆级指南 Hexo + GitHub Pages 搭建静态博客"}]